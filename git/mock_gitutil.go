// Code generated by MockGen. DO NOT EDIT.
// Source: git/types.go

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGitUtilInterface is a mock of GitUtilInterface interface.
type MockGitUtilInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitUtilInterfaceMockRecorder
}

// MockGitUtilInterfaceMockRecorder is the mock recorder for MockGitUtilInterface.
type MockGitUtilInterfaceMockRecorder struct {
	mock *MockGitUtilInterface
}

// NewMockGitUtilInterface creates a new mock instance.
func NewMockGitUtilInterface(ctrl *gomock.Controller) *MockGitUtilInterface {
	mock := &MockGitUtilInterface{ctrl: ctrl}
	mock.recorder = &MockGitUtilInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitUtilInterface) EXPECT() *MockGitUtilInterfaceMockRecorder {
	return m.recorder
}

// CommitLog mocks base method.
func (m *MockGitUtilInterface) CommitLog(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitLog", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitLog indicates an expected call of CommitLog.
func (mr *MockGitUtilInterfaceMockRecorder) CommitLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitLog", reflect.TypeOf((*MockGitUtilInterface)(nil).CommitLog), arg0)
}

// HeadHash mocks base method.
func (m *MockGitUtilInterface) HeadHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadHash indicates an expected call of HeadHash.
func (mr *MockGitUtilInterfaceMockRecorder) HeadHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadHash", reflect.TypeOf((*MockGitUtilInterface)(nil).HeadHash))
}

// ListAllFiles mocks base method.
func (m *MockGitUtilInterface) ListAllFiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllFiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllFiles indicates an expected call of ListAllFiles.
func (mr *MockGitUtilInterfaceMockRecorder) ListAllFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllFiles", reflect.TypeOf((*MockGitUtilInterface)(nil).ListAllFiles))
}

// ListDiffFiles mocks base method.
func (m *MockGitUtilInterface) ListDiffFiles(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiffFiles", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiffFiles indicates an expected call of ListDiffFiles.
func (mr *MockGitUtilInterfaceMockRecorder) ListDiffFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiffFiles", reflect.TypeOf((*MockGitUtilInterface)(nil).ListDiffFiles), arg0, arg1)
}
