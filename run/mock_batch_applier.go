// Code generated by MockGen. DO NOT EDIT.
// Source: run/batch_applier.go

// Package run is a generated GoMock package.
package run

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBatchApplierInterface is a mock of BatchApplierInterface interface.
type MockBatchApplierInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBatchApplierInterfaceMockRecorder
}

// MockBatchApplierInterfaceMockRecorder is the mock recorder for MockBatchApplierInterface.
type MockBatchApplierInterfaceMockRecorder struct {
	mock *MockBatchApplierInterface
}

// NewMockBatchApplierInterface creates a new mock instance.
func NewMockBatchApplierInterface(ctrl *gomock.Controller) *MockBatchApplierInterface {
	mock := &MockBatchApplierInterface{ctrl: ctrl}
	mock.recorder = &MockBatchApplierInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchApplierInterface) EXPECT() *MockBatchApplierInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockBatchApplierInterface) Apply(arg0 int, arg1 []string) ([]ApplyAttempt, []ApplyAttempt) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1)
	ret0, _ := ret[0].([]ApplyAttempt)
	ret1, _ := ret[1].([]ApplyAttempt)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockBatchApplierInterfaceMockRecorder) Apply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockBatchApplierInterface)(nil).Apply), arg0, arg1)
}
